{"mappings":"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","names":["renderHtml","string","template","renderSvg","g","html","hypertext","fragment","span","svg","CODE_TAB","CODE_LF","CODE_FF","CODE_CR","CODE_SPACE","CODE_UPPER_A","CODE_UPPER_Z","CODE_LOWER_A","CODE_LOWER_Z","CODE_LT","CODE_GT","CODE_SLASH","CODE_DASH","CODE_BANG","CODE_EQ","CODE_DQUOTE","CODE_SQUOTE","CODE_QUESTION","STATE_DATA","STATE_TAG_OPEN","STATE_END_TAG_OPEN","STATE_TAG_NAME","STATE_BOGUS_COMMENT","STATE_BEFORE_ATTRIBUTE_NAME","STATE_AFTER_ATTRIBUTE_NAME","STATE_ATTRIBUTE_NAME","STATE_BEFORE_ATTRIBUTE_VALUE","STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED","STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED","STATE_ATTRIBUTE_VALUE_UNQUOTED","STATE_AFTER_ATTRIBUTE_VALUE_QUOTED","STATE_SELF_CLOSING_START_TAG","STATE_COMMENT_START","STATE_COMMENT_START_DASH","STATE_COMMENT","STATE_COMMENT_LESS_THAN_SIGN","STATE_COMMENT_LESS_THAN_SIGN_BANG","STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH","STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","STATE_COMMENT_END_DASH","STATE_COMMENT_END","STATE_COMMENT_END_BANG","STATE_MARKUP_DECLARATION_OPEN","STATE_RAWTEXT","STATE_RAWTEXT_LESS_THAN_SIGN","STATE_RAWTEXT_END_TAG_OPEN","STATE_RAWTEXT_END_TAG_NAME","SHOW_COMMENT","SHOW_ELEMENT","TYPE_COMMENT","TYPE_ELEMENT","NS_SVG","NS_XLINK","NS_XML","NS_XMLNS","svgAdjustAttributes","name","svgForeignAttributes","render","postprocess","strings","state","tagNameStart","tagName","attributeNameStart","attributeNameEnd","nodeFilter","j","m","input","value","text","isEscapableRawText","entity","isObjectLiteral","i","n","code","isAsciiAlphaCode","isSpaceCode","lower","isRawText","root","walker","removeNodes","node","attributes","currentValue","removeAttribute","key","subvalue","setStyles","setAttribute","parent","r","character","start","end","style","values"],"sourceRoot":"/","sources":["../esmd/npm/htl@0.3.1/node_modules/.pnpm/htl@0.3.1/node_modules/htl/src/index.js"],"sourcesContent":["function renderHtml(string) {\n  const template = document.createElement(\"template\");\n  template.innerHTML = string;\n  return document.importNode(template.content, true);\n}\n\nfunction renderSvg(string) {\n  const g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  g.innerHTML = string;\n  return g;\n}\n\nexport const html = Object.assign(hypertext(renderHtml, fragment =\u003e {\n  if (fragment.firstChild === null) return null;\n  if (fragment.firstChild === fragment.lastChild) return fragment.removeChild(fragment.firstChild);\n  const span = document.createElement(\"span\");\n  span.appendChild(fragment);\n  return span;\n}), {fragment: hypertext(renderHtml, fragment =\u003e fragment)});\n\nexport const svg = Object.assign(hypertext(renderSvg, g =\u003e {\n  if (g.firstChild === null) return null;\n  if (g.firstChild === g.lastChild) return g.removeChild(g.firstChild);\n  return g;\n}), {fragment: hypertext(renderSvg, g =\u003e {\n  const fragment = document.createDocumentFragment();\n  while (g.firstChild) fragment.appendChild(g.firstChild);\n  return fragment;\n})});\n\nconst\nCODE_TAB = 9,\nCODE_LF = 10,\nCODE_FF = 12,\nCODE_CR = 13,\nCODE_SPACE = 32,\nCODE_UPPER_A = 65,\nCODE_UPPER_Z = 90,\nCODE_LOWER_A = 97,\nCODE_LOWER_Z = 122,\nCODE_LT = 60,\nCODE_GT = 62,\nCODE_SLASH = 47,\nCODE_DASH = 45,\nCODE_BANG = 33,\nCODE_EQ = 61,\nCODE_DQUOTE = 34,\nCODE_SQUOTE = 39,\nCODE_QUESTION = 63,\nSTATE_DATA = 1,\nSTATE_TAG_OPEN = 2,\nSTATE_END_TAG_OPEN = 3,\nSTATE_TAG_NAME = 4,\nSTATE_BOGUS_COMMENT = 5,\nSTATE_BEFORE_ATTRIBUTE_NAME = 6,\nSTATE_AFTER_ATTRIBUTE_NAME = 7,\nSTATE_ATTRIBUTE_NAME = 8,\nSTATE_BEFORE_ATTRIBUTE_VALUE = 9,\nSTATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED = 10,\nSTATE_ATTRIBUTE_VALUE_SINGLE_QUOTED = 11,\nSTATE_ATTRIBUTE_VALUE_UNQUOTED = 12,\nSTATE_AFTER_ATTRIBUTE_VALUE_QUOTED = 13,\nSTATE_SELF_CLOSING_START_TAG = 14,\nSTATE_COMMENT_START = 15,\nSTATE_COMMENT_START_DASH = 16,\nSTATE_COMMENT = 17,\nSTATE_COMMENT_LESS_THAN_SIGN = 18,\nSTATE_COMMENT_LESS_THAN_SIGN_BANG = 19,\nSTATE_COMMENT_LESS_THAN_SIGN_BANG_DASH = 20,\nSTATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH = 21,\nSTATE_COMMENT_END_DASH = 22,\nSTATE_COMMENT_END = 23,\nSTATE_COMMENT_END_BANG = 24,\nSTATE_MARKUP_DECLARATION_OPEN = 25,\nSTATE_RAWTEXT = 26,\nSTATE_RAWTEXT_LESS_THAN_SIGN = 27,\nSTATE_RAWTEXT_END_TAG_OPEN = 28,\nSTATE_RAWTEXT_END_TAG_NAME = 29,\nSHOW_COMMENT = 128,\nSHOW_ELEMENT = 1,\nTYPE_COMMENT = 8,\nTYPE_ELEMENT = 1,\nNS_SVG = \"http://www.w3.org/2000/svg\",\nNS_XLINK = \"http://www.w3.org/1999/xlink\",\nNS_XML = \"http://www.w3.org/XML/1998/namespace\",\nNS_XMLNS = \"http://www.w3.org/2000/xmlns/\";\n\nconst svgAdjustAttributes = new Map([\n  \"attributeName\",\n  \"attributeType\",\n  \"baseFrequency\",\n  \"baseProfile\",\n  \"calcMode\",\n  \"clipPathUnits\",\n  \"diffuseConstant\",\n  \"edgeMode\",\n  \"filterUnits\",\n  \"glyphRef\",\n  \"gradientTransform\",\n  \"gradientUnits\",\n  \"kernelMatrix\",\n  \"kernelUnitLength\",\n  \"keyPoints\",\n  \"keySplines\",\n  \"keyTimes\",\n  \"lengthAdjust\",\n  \"limitingConeAngle\",\n  \"markerHeight\",\n  \"markerUnits\",\n  \"markerWidth\",\n  \"maskContentUnits\",\n  \"maskUnits\",\n  \"numOctaves\",\n  \"pathLength\",\n  \"patternContentUnits\",\n  \"patternTransform\",\n  \"patternUnits\",\n  \"pointsAtX\",\n  \"pointsAtY\",\n  \"pointsAtZ\",\n  \"preserveAlpha\",\n  \"preserveAspectRatio\",\n  \"primitiveUnits\",\n  \"refX\",\n  \"refY\",\n  \"repeatCount\",\n  \"repeatDur\",\n  \"requiredExtensions\",\n  \"requiredFeatures\",\n  \"specularConstant\",\n  \"specularExponent\",\n  \"spreadMethod\",\n  \"startOffset\",\n  \"stdDeviation\",\n  \"stitchTiles\",\n  \"surfaceScale\",\n  \"systemLanguage\",\n  \"tableValues\",\n  \"targetX\",\n  \"targetY\",\n  \"textLength\",\n  \"viewBox\",\n  \"viewTarget\",\n  \"xChannelSelector\",\n  \"yChannelSelector\",\n  \"zoomAndPan\"\n].map(name =\u003e [name.toLowerCase(), name]));\n\nconst svgForeignAttributes = new Map([\n  [\"xlink:actuate\", NS_XLINK],\n  [\"xlink:arcrole\", NS_XLINK],\n  [\"xlink:href\", NS_XLINK],\n  [\"xlink:role\", NS_XLINK],\n  [\"xlink:show\", NS_XLINK],\n  [\"xlink:title\", NS_XLINK],\n  [\"xlink:type\", NS_XLINK],\n  [\"xml:lang\", NS_XML],\n  [\"xml:space\", NS_XML],\n  [\"xmlns\", NS_XMLNS],\n  [\"xmlns:xlink\", NS_XMLNS]\n]);\n\nfunction hypertext(render, postprocess) {\n  return function({raw: strings}) {\n    let state = STATE_DATA;\n    let string = \"\";\n    let tagNameStart; // either an open tag or an end tag\n    let tagName; // only open; beware nesting! used only for rawtext\n    let attributeNameStart;\n    let attributeNameEnd;\n    let nodeFilter = 0;\n\n    for (let j = 0, m = arguments.length; j \u003c m; ++j) {\n      const input = strings[j];\n\n      if (j \u003e 0) {\n        const value = arguments[j];\n        switch (state) {\n          case STATE_RAWTEXT: {\n            if (value != null) {\n              const text = `${value}`;\n              if (isEscapableRawText(tagName)) {\n                string += text.replace(/[\u003c]/g, entity);\n              } else if (new RegExp(`\u003c/${tagName}[\\\\s\u003e/]`, \"i\").test(string.slice(-tagName.length - 2) + text)) {\n                throw new Error(\"unsafe raw text\"); // appropriate end tag\n              } else {\n                string += text;\n              }\n            }\n            break;\n          }\n          case STATE_DATA: {\n            if (value == null) {\n              // ignore\n            } else if (value instanceof Node\n                || (typeof value !== \"string\" \u0026\u0026 value[Symbol.iterator])\n                || (/(?:^|\u003e)$/.test(strings[j - 1]) \u0026\u0026 /^(?:\u003c|$)/.test(input))) {\n              string += \"\u003c!--::\" + j + \"--\u003e\";\n              nodeFilter |= SHOW_COMMENT;\n            } else {\n              string += `${value}`.replace(/[\u003c\u0026]/g, entity);\n            }\n            break;\n          }\n          case STATE_BEFORE_ATTRIBUTE_VALUE: {\n            state = STATE_ATTRIBUTE_VALUE_UNQUOTED;\n            let text;\n            if (/^[\\s\u003e]/.test(input)) {\n              if (value == null || value === false) {\n                string = string.slice(0, attributeNameStart - strings[j - 1].length);\n                break;\n              }\n              if (value === true || (text = `${value}`) === \"\") {\n                string += \"''\";\n                break;\n              }\n              const name = strings[j - 1].slice(attributeNameStart, attributeNameEnd);\n              if ((name === \"style\" \u0026\u0026 isObjectLiteral(value)) || typeof value === \"function\") {\n                string += \"::\" + j;\n                nodeFilter |= SHOW_ELEMENT;\n                break;\n              }\n            }\n            if (text === undefined) text = `${value}`;\n            if (text === \"\") throw new Error(\"unsafe unquoted empty string\");\n            string += text.replace(/^['\"]|[\\s\u003e\u0026]/g, entity);\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_UNQUOTED: {\n            string += `${value}`.replace(/[\\s\u003e\u0026]/g, entity);\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n            string += `${value}`.replace(/['\u0026]/g, entity);\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n            string += `${value}`.replace(/[\"\u0026]/g, entity);\n            break;\n          }\n          case STATE_BEFORE_ATTRIBUTE_NAME: {\n            if (isObjectLiteral(value)) {\n              string += \"::\" + j + \"=''\";\n              nodeFilter |= SHOW_ELEMENT;\n              break;\n            }\n            throw new Error(\"invalid binding\");\n          }\n          case STATE_COMMENT: break;\n          default: throw new Error(\"invalid binding\");\n        }\n      }\n\n      for (let i = 0, n = input.length; i \u003c n; ++i) {\n        const code = input.charCodeAt(i);\n\n        switch (state) {\n          case STATE_DATA: {\n            if (code === CODE_LT) {\n              state = STATE_TAG_OPEN;\n            }\n            break;\n          }\n          case STATE_TAG_OPEN: {\n            if (code === CODE_BANG) {\n              state = STATE_MARKUP_DECLARATION_OPEN;\n            } else if (code === CODE_SLASH) {\n              state = STATE_END_TAG_OPEN;\n            } else if (isAsciiAlphaCode(code)) {\n              tagNameStart = i, tagName = undefined;\n              state = STATE_TAG_NAME, --i;\n            } else if (code === CODE_QUESTION) {\n              state = STATE_BOGUS_COMMENT, --i;\n            } else {\n              state = STATE_DATA, --i;\n            }\n            break;\n          }\n          case STATE_END_TAG_OPEN: {\n            if (isAsciiAlphaCode(code)) {\n              state = STATE_TAG_NAME, --i;\n            } else if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else {\n              state = STATE_BOGUS_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_TAG_NAME: {\n            if (isSpaceCode(code)) {\n              state = STATE_BEFORE_ATTRIBUTE_NAME;\n              tagName = lower(input, tagNameStart, i);\n            } else if (code === CODE_SLASH) {\n              state = STATE_SELF_CLOSING_START_TAG;\n            } else if (code === CODE_GT) {\n              tagName = lower(input, tagNameStart, i);\n              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;\n            }\n            break;\n          }\n          case STATE_BEFORE_ATTRIBUTE_NAME: {\n            if (isSpaceCode(code)) {\n              // continue\n            } else if (code === CODE_SLASH || code === CODE_GT) {\n              state = STATE_AFTER_ATTRIBUTE_NAME, --i;\n            } else if (code === CODE_EQ) {\n              state = STATE_ATTRIBUTE_NAME;\n              attributeNameStart = i + 1, attributeNameEnd = undefined;\n            } else {\n              state = STATE_ATTRIBUTE_NAME, --i;\n              attributeNameStart = i + 1, attributeNameEnd = undefined;\n            }\n            break;\n          }\n          case STATE_ATTRIBUTE_NAME: {\n            if (isSpaceCode(code) || code === CODE_SLASH || code === CODE_GT) {\n              state = STATE_AFTER_ATTRIBUTE_NAME, --i;\n              attributeNameEnd = i;\n            } else if (code === CODE_EQ) {\n              state = STATE_BEFORE_ATTRIBUTE_VALUE;\n              attributeNameEnd = i;\n            }\n            break;\n          }\n          case STATE_AFTER_ATTRIBUTE_NAME: {\n            if (isSpaceCode(code)) {\n              // ignore\n            } else if (code === CODE_SLASH) {\n              state = STATE_SELF_CLOSING_START_TAG;\n            } else if (code === CODE_EQ) {\n              state = STATE_BEFORE_ATTRIBUTE_VALUE;\n            } else if (code === CODE_GT) {\n              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;\n            } else {\n              state = STATE_ATTRIBUTE_NAME, --i;\n              attributeNameStart = i + 1, attributeNameEnd = undefined;\n            }\n            break;\n          }\n          case STATE_BEFORE_ATTRIBUTE_VALUE: {\n            if (isSpaceCode(code)) {\n              // continue\n            } else if (code === CODE_DQUOTE) {\n              state = STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n            } else if (code === CODE_SQUOTE) {\n              state = STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED;\n            } else if (code === CODE_GT) {\n              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;\n            } else {\n              state = STATE_ATTRIBUTE_VALUE_UNQUOTED, --i;\n            }\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n            if (code === CODE_DQUOTE) {\n              state = STATE_AFTER_ATTRIBUTE_VALUE_QUOTED;\n            }\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n            if (code === CODE_SQUOTE) {\n              state = STATE_AFTER_ATTRIBUTE_VALUE_QUOTED;\n            }\n            break;\n          }\n          case STATE_ATTRIBUTE_VALUE_UNQUOTED: {\n            if (isSpaceCode(code)) {\n              state = STATE_BEFORE_ATTRIBUTE_NAME;\n            } else if (code === CODE_GT) {\n              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;\n            }\n            break;\n          }\n          case STATE_AFTER_ATTRIBUTE_VALUE_QUOTED: {\n            if (isSpaceCode(code)) {\n              state = STATE_BEFORE_ATTRIBUTE_NAME;\n            } else if (code === CODE_SLASH) {\n              state = STATE_SELF_CLOSING_START_TAG;\n            } else if (code === CODE_GT) {\n              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;\n            } else {\n              state = STATE_BEFORE_ATTRIBUTE_NAME, --i;\n            }\n            break;\n          }\n          case STATE_SELF_CLOSING_START_TAG: {\n            if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else {\n              state = STATE_BEFORE_ATTRIBUTE_NAME, --i;\n            }\n            break;\n          }\n          case STATE_BOGUS_COMMENT: {\n            if (code === CODE_GT) {\n              state = STATE_DATA;\n            }\n            break;\n          }\n          case STATE_COMMENT_START: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_START_DASH;\n            } else if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_START_DASH: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_END;\n            } else if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT: {\n            if (code === CODE_LT) {\n              state = STATE_COMMENT_LESS_THAN_SIGN;\n            } else if (code === CODE_DASH) {\n              state = STATE_COMMENT_END_DASH;\n            }\n            break;\n          }\n          case STATE_COMMENT_LESS_THAN_SIGN: {\n            if (code === CODE_BANG) {\n              state = STATE_COMMENT_LESS_THAN_SIGN_BANG;\n            } else if (code !== CODE_LT) {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_LESS_THAN_SIGN_BANG: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH;\n            } else {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n            } else {\n              state = STATE_COMMENT_END, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n            state = STATE_COMMENT_END, --i;\n            break;\n          }\n          case STATE_COMMENT_END_DASH: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_END;\n            } else {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_END: {\n            if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else if (code === CODE_BANG) {\n              state = STATE_COMMENT_END_BANG;\n            } else if (code !== CODE_DASH) {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_COMMENT_END_BANG: {\n            if (code === CODE_DASH) {\n              state = STATE_COMMENT_END_DASH;\n            } else if (code === CODE_GT) {\n              state = STATE_DATA;\n            } else {\n              state = STATE_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_MARKUP_DECLARATION_OPEN: {\n            if (code === CODE_DASH \u0026\u0026 input.charCodeAt(i + 1) === CODE_DASH) {\n              state = STATE_COMMENT_START, ++i;\n            } else { // Note: CDATA and DOCTYPE unsupported!\n              state = STATE_BOGUS_COMMENT, --i;\n            }\n            break;\n          }\n          case STATE_RAWTEXT: {\n            if (code === CODE_LT) {\n              state = STATE_RAWTEXT_LESS_THAN_SIGN;\n            }\n            break;\n          }\n          case STATE_RAWTEXT_LESS_THAN_SIGN: {\n            if (code === CODE_SLASH) {\n              state = STATE_RAWTEXT_END_TAG_OPEN;\n            } else {\n              state = STATE_RAWTEXT, --i;\n            }\n            break;\n          }\n          case STATE_RAWTEXT_END_TAG_OPEN: {\n            if (isAsciiAlphaCode(code)) {\n              tagNameStart = i;\n              state = STATE_RAWTEXT_END_TAG_NAME, --i;\n            } else {\n              state = STATE_RAWTEXT, --i;\n            }\n            break;\n          }\n          case STATE_RAWTEXT_END_TAG_NAME: {\n            if (isSpaceCode(code) \u0026\u0026 tagName === lower(input, tagNameStart, i)) {\n              state = STATE_BEFORE_ATTRIBUTE_NAME;\n            } else if (code === CODE_SLASH \u0026\u0026 tagName === lower(input, tagNameStart, i)) {\n              state = STATE_SELF_CLOSING_START_TAG;\n            } else if (code === CODE_GT \u0026\u0026 tagName === lower(input, tagNameStart, i)) {\n              state = STATE_DATA;\n            } else if (!isAsciiAlphaCode(code)) {\n              state = STATE_RAWTEXT, --i;\n            }\n            break;\n          }\n          default: {\n            state = undefined;\n            break;\n          }\n        }\n      }\n\n      string += input;\n    }\n\n    const root = render(string);\n\n    const walker = document.createTreeWalker(root, nodeFilter, null, false);\n    const removeNodes = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      switch (node.nodeType) {\n        case TYPE_ELEMENT: {\n          const attributes = node.attributes;\n          for (let i = 0, n = attributes.length; i \u003c n; ++i) {\n            const {name, value: currentValue} = attributes[i];\n            if (/^::/.test(name)) {\n              const value = arguments[+name.slice(2)];\n              removeAttribute(node, name), --i, --n;\n              for (const key in value) {\n                const subvalue = value[key];\n                if (subvalue == null || subvalue === false) {\n                  // ignore\n                } else if (typeof subvalue === \"function\") {\n                  node[key] = subvalue;\n                } else if (key === \"style\" \u0026\u0026 isObjectLiteral(subvalue)) {\n                  setStyles(node[key], subvalue);\n                } else {\n                  setAttribute(node, key, subvalue === true ? \"\" : subvalue);\n                }\n              }\n            } else if (/^::/.test(currentValue)) {\n              const value = arguments[+currentValue.slice(2)];\n              removeAttribute(node, name), --i, --n;\n              if (typeof value === \"function\") {\n                node[name] = value;\n              } else { // style\n                setStyles(node[name], value);\n              }\n            }\n          }\n          break;\n        }\n        case TYPE_COMMENT: {\n          if (/^::/.test(node.data)) {\n            const parent = node.parentNode;\n            const value = arguments[+node.data.slice(2)];\n            if (value instanceof Node) {\n              parent.insertBefore(value, node);\n            } else if (typeof value !== \"string\" \u0026\u0026 value[Symbol.iterator]) {\n              if (value instanceof NodeList || value instanceof HTMLCollection) {\n                for (let i = value.length - 1, r = node; i \u003e= 0; --i) {\n                  r = parent.insertBefore(value[i], r);\n                }\n              } else {\n                for (const subvalue of value) {\n                  if (subvalue == null) continue;\n                  parent.insertBefore(subvalue instanceof Node ? subvalue : document.createTextNode(subvalue), node);\n                }\n              }\n            } else {\n              parent.insertBefore(document.createTextNode(value), node);\n            }\n            removeNodes.push(node);\n          }\n          break;\n        }\n      }\n    }\n\n    for (const node of removeNodes) {\n      node.parentNode.removeChild(node);\n    }\n\n    return postprocess(root);\n  };\n}\n\nfunction entity(character) {\n  return `\u0026#${character.charCodeAt(0).toString()};`;\n}\n\nfunction isAsciiAlphaCode(code) {\n  return (CODE_UPPER_A \u003c= code \u0026\u0026 code \u003c= CODE_UPPER_Z)\n      || (CODE_LOWER_A \u003c= code \u0026\u0026 code \u003c= CODE_LOWER_Z);\n}\n\nfunction isSpaceCode(code) {\n  return code === CODE_TAB\n      || code === CODE_LF\n      || code === CODE_FF\n      || code === CODE_SPACE\n      || code === CODE_CR; // normalize newlines\n}\n\nfunction isObjectLiteral(value) {\n  return value \u0026\u0026 value.toString === Object.prototype.toString;\n}\n\nfunction isRawText(tagName) {\n  return tagName === \"script\" || tagName === \"style\" || isEscapableRawText(tagName);\n}\n\nfunction isEscapableRawText(tagName) {\n  return tagName === \"textarea\" || tagName === \"title\";\n}\n\nfunction lower(input, start, end) {\n  return input.slice(start, end).toLowerCase();\n}\n\nfunction setAttribute(node, name, value) {\n  if (node.namespaceURI === NS_SVG) {\n    name = name.toLowerCase();\n    name = svgAdjustAttributes.get(name) || name;\n    if (svgForeignAttributes.has(name)) {\n      node.setAttributeNS(svgForeignAttributes.get(name), name, value);\n      return;\n    }\n  }\n  node.setAttribute(name, value);\n}\n\nfunction removeAttribute(node, name) {\n  if (node.namespaceURI === NS_SVG) {\n    name = name.toLowerCase();\n    name = svgAdjustAttributes.get(name) || name;\n    if (svgForeignAttributes.has(name)) {\n      node.removeAttributeNS(svgForeignAttributes.get(name), name);\n      return;\n    }\n  }\n  node.removeAttribute(name);\n}\n\n// We can’t use Object.assign because custom properties…\nfunction setStyles(style, values) {\n  for (const name in values) {\n    const value = values[name];\n    if (name.startsWith(\"--\")) style.setProperty(name, value);\n    else style[name] = value;\n  }\n}\n"],"version":3}
